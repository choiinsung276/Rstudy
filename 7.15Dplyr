install.packages("dplyr")
library(dplyr)
help(package=dplyr)

#filter() : 행 추출 -> subset()
#select() : 열 추출 -> data[, c("열이름", "열이름")]
#arrange() : 정렬 -> order(), sort()
#mutate() : 열추가 -> transform()
#summarize() : 통계치 산출 ->aggregate()
#groupby() : 집단별로 나누기 -> subset(), tapply()
#left_join() : 데이터합치기(열) -> cbind()
#bind_rows() : 데이터합치기(행) ->rbind()

exam <-read.csv("../data/csv_exam.csv")
exam <-read.csv(file.choose())
exam

# filter
# 1반 학생들의 데이터 추출
# 행은 exam$id ==1 인, 열은 모든열 추출하겠다 =공백
exam[exam$id==1, ]
filter(exam, class == 1)
exam %>% filter(class ==1)

# 2반이면서 영어점수가 80점 이상인 데이터 추출
filter(exam, class==2,english >=80)
exam[exam$class ==2 & exam$english >=80, ]
exam %>% filter(class ==2 & english >=80)

# 1,3,5반에 해당하는 데이터 추출
exam %>% filter(class ==1 | class ==3 | class==5)
# | = or 연산자, 연산자를 단축시켜주는
exam %>% filter(class %in% c(1,3,5))

#select() 
#수학 점수만 호출
exam[, 3] #수학이 3번째에 있으니까
# select(열이름)
exam %>% select(math)
# 반, 수학, 영어점수 호출
exam %>% select(class, math, english)
# 어떤열을 제외하고 가져오고싶다
 exam %>% select(-math)
 # 1반 학생들의 수학점수만 추출
 exam %>% filter(class==1) %>% select(math)
# 여러가지 연산자 사용가능
 exam %>% filter(class==1) %>% select(math) %>% head(2)
 #arrange() 정렬 
 exam %>% arrange(math)
 exam %>% arrange(desc(math))
#클래스로 먼저 오름차순하고 수학점수로 오름차순
 exam%>% arrange(class, math) 
 # mutate ()
#기본문법으로 sum이라는 열을 만든다. sum은 3열의 합으로
  exam$sum <- exam$math + exam$english + exam$science
head(exam) 
#mutate() 함수이용하기
#기본문법은 열하나하나씩 만들수있는데 한번에 많이 만들수있음
exam <- exam %>% mutate(total =math+english+science,
                mean =(math+english+science)/3 )
head(exam)
# summarize()
exam %>% summarise(mean_math=mean(math))
#group_by()
exam %>% group_by(class) %>%
  summarise(mean_math=mean(math), sum_math = sum(math),
            median_math=median(math), n=n())
# left_join()
test1 <- data.frame(id =c(1,2,3,4,5), midterm=c(60,70,80,90,85))
test2 <- data.frame(id =c(1,2,3,4,5), midterm=c(70,83,65,95,80))

total <- left_join(test1, test2, by="id")
total

test3 <- data.frame(class =c(1,2,3,4,5),
                    teacher = c("kim","lee","park","choi","shin"))
exam_new <- left_join(exam, test3, by="class")
head(exam_new)

#bind_rows()
group1 <- data.frame(id =c(1,2,3,4,5), midterm=c(60,70,80,90,85))
group2 <- data.frame(id =c(1,2,3,4,5), midterm=c(70,83,65,95,80))

group_all <- bind_rows(group1, group2)
group_all

#---------------------------------------
install.packages("ggplot2")
library(ggplot2)

# https://moon9342.github.io/R-lecture-R-dplyr-exercise

str(ggplot2::mpg)
head(ggplot2::mpg, 10)
class(ggplot2::mpg)

mpg <- as.data.frame(ggplot2::mpg)
mpg
class(mpg)
head(mpg)
names(mpg) #어떤열이있는지
dim(mpg) #몇개가 몇열있는지
str(mpg) #대락적 데이터 개요, 열이름, 자료형, 어떤데이터..
View(mpg) #대문자 V

#배기량(displ)이 4이하인 모델명, 배기량, 생산년도 조회

mpg %>% select(model,displ,year) %>%filter(displ<=4)
select(filter(mpg, displ<=4), model,displ,year)


mpg %>% select(model,displ,hwy) %>%
  filter(displ<=4) %>%
  group_by(model) %>%
  summarise(mean = mean(hwy)) %>%
  arrange(desc(mean)) %>%

#데이터 프레임 따로저장
mpg_a <-mpg %>% select(model,displ,year) %>%filter(displ<=4)
class(mpg_a)
#통합 연비 파생변수 (total)를 만들고 통합연비로 내림차순 정렬을 한후에
#3개의 행만 선택해서 조회
#통합연비 : total <- (cty+hwy)/2

mpg %>% mutate(total=(cty+hwy)/2) %>% arrange(desc(total)) %>% head(3)
# 회사별로 "suv" 차량의 도시 및 고속도로 통합연비 평균을 구해
# 내림차순으로 정렬하고 1위 ~ 5위까지 조회
mpg %>% group_by(manufacturer) %>%
  filter(class=="suv") %>% mutate(total=(cty+hwy)/2) %>%
  summarise(mean_tot=mean(total)) %>% arrange(desc(mean_tot))%>% head(5)


# 어떤 회사의 hwy 연비가 가장 높은지 알아보려고한다.
#hwy 평균이 가장 높은 회사 세곳을 조회
mpg %>%
  group_by(manufacturer) %>%
  summarise(mean = mean(hwy))%>%
  arrange(desc(mean)) %>% head(3)
# 어떤 회사에서 compact(경차) 차종을 가장 많이 생산하는지 알아보려고한다.
# 각 회사별 경차 차종 수를 내림차순으로 조회

mpg %>% filter(class =="compact") %>%
  group_by(manufacturer) %>%
  summarise(ncount = n()) %>%
  arrange(desc(ncount))

#연료별 가격을 구해서 새로운 데이터프레임(fuel)으로 
# 만든후 기존 데이터셋과 병합하여 출력.
# c: CNG = 2.35 , d:Disel = 2.38, e: Ethanol = 2.11,
# p:Premium = 2.76 , r:Regular = 2.22

fuel <- data.frame(fl = c("c","d","e","p","r"),
                   price = c(2.35,2.38,2.11,2.76,2.22))
fuel
mpg <- left_join(mpg, fuel, by="fl")
head(mpg)

# 통합연비의 기준치를 통해 합격(pass)/불합격(fail)을
#부여하는 test라는 이름의 파생변수를 생성, 이때 기준은
# 통합연비가격을 20으로 한다.
#정답
mpg <- mpg %>% mutate(total=(cty+hwy)/2) 
mpg$test <- ifelse(mpg$total>=20, "pass","fail")
head(mpg)

#test에 대해 합격과 불합격을 받은 자동차가 각각 몇대인가?
table(mpg$test)

# 통합연비등급을 A,B,C 세등급으로 나누는 파생변수 추가:grade
# 30이상이면 A, 20~29는 B, 20미만이면 C등급으로 분류
mpg$grade <- ifelse(mpg$total >=30, 'A', 
                    ifelse(mpg$total>=20,'B','C'))
table(mpg$grade)
head(mpg)

#-----------------------------
#### 미국 동북부 437개 지역의 인구 통계 정보 ####
#https://sesamy.tistory.com/40
midwest <- as.data.frame(ggplot2::midwest)
head(midwest)
names(midwest)
str(midwest)

# 전체 인구대비 미성년 인구 백분율(ratio_child) 변수를 추가
midwest <-midwest %>%
  mutate(ratio_child=((poptotal-popadults)/poptotal*100))
# 미성년 인구 백분율이 가장 높은 상위 5개 지역의 미성년 백분율 출력
midwest %>% group_by(county) %>%
  arrange(desc(ratio_child)) %>% select(ratio_child) %>% head(5)
# 분류표의 기준에 따라 미성년 비율 등급변수(grade)를 추가하고, 각 등급에
# 몇개의 지역이 있는지 조회
#미성년 인구 백분율이 40이상이면 "large", 30이상이면 "middel",
# 그렇지 않으면 "small"
midwest$grade <- ifelse(midwest$ratio_child>=40,"large",
                        ifelse(midwest$ratio_child>=30,"middle","small"))

#전체 인구 대비 아시아인 인구 백분율(ratio_asian) 변수를 추가하고 하위
# 10개 지역의 state, country, 아시아인 인구 백분율을 출력
midwest <- midwest %>%
  mutate(ratio_asian=(popasian/poptotal*100))
midwest %>% arrange(ratio_asian) %>% select(state,county,ratio_asian) %>% tail(10)

#### Data Preprocessing ####

# 순서 : 데이터 탐색 > 결측치 처리 > 이상치 처리 > Feature Engineering 

# 데이터 탐색
# 1) 변수 확인
# 2) 변수 유형(범주형, 연속형, 문자형, 숫자형, ...)
# 3) 변수의 통계량 : 평균, 최빈값, 중간값, 분포, ...
# 4) 관계, 차이 검정

# 결측치 처리
# 1) 삭제
# 2) 다른값으로 대체(평균, 최빈값, 중간값)
# 3) 예측값 : 선형 회귀분석, 로지스틱 회귀분석 

# 이상치 처리
# 1) 이상치 탐색 
#   - 시각적 확인 : 산포도, boxplot
#   - 통계적 확인 : 표준 잔차, leverage, Cook's D
# 2) 처리 방법
#   - 삭제
#   - 다른 값으로 대체 
#   - 리샘플링(케이스별로 분리)

# Feature Engineering
# 1) Scaling : 단위 변경
# 2) Binning : 연속형 변수를 범주형 변수로 변환
# 3) Transform : 기존 존재하는 변수의 성질을 이용해 다른 변수를 만드는 방법 
# 4) Dummy : 범주형 변수를 연속형 변수로 변환

#변수명 바꾸기
df_raw <-data.frame(var1 =c(1,2,3),var2=c(2,3,2))
df_raw
#내장함수
df_new1 <- df_raw
names(df_new1) <- c("v1","v2")
df_new1
#패키지(dplyr)
df_new2 <- df_raw
df_new2 <- rename(df_new2, v1=var1, v2=var2)
df_new2
#dataset.csv

#코드 
#링크 https://tastydarr.tistory.com/entry/%ED%95%A8%EC%88%98-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EA%B2%B0%EC%B8%A1%EC%B9%98-%EC%B2%98%EB%A6%ACnaomit-ifelse
dataset1 <- read.csv(file.choose())
dataset1
head(dataset1)
View(dataset1)
str(dataset1)
#resident : 1~5까지의 값을 갖는 명목 변수로 거지시를 나타냄.
#gender : 1~2 까지의 값을 갖는 명목 변수, 남/녀를 나타냄
# job : 1~3 까지의 값을 갖는 명목 변수, 직업을 나타냄
# age : 양적변수 (비율) : 2~69
#position : 1~5까지의 값을 갖는 명목변수, 직위를 나타냄
#price : 양적변수(비율) : 2.1~ 7.9
#survey : 만족도 조사 : 1~5까지 명목변수

y <- dataset1$price
plot(y)
#앞으로 dataset1$ 안붙이고 사용할수있음.
attach(dataset1)
#price

#detach(dataset1)
#price

#결측치 확인
#price에는 결측치가 30개가 있다 알수있음
summary(price)

#결측치 제거 , 결측치를 빼고 계산하겠다.
# na.rm 인자
sum(price, na.rm=T)
#실제 삭제하는것
# 행단위로 어떤 결측치라도 있으면 이행을 제거하고
#남은 데이터를 반환한다.
price2 <- na.omit(price)
summary(price2)
sum(price2)

#결측치 대체
#0으로 대체
price2 <- ifelse(!is.na(price),price,0)
sum(price2)



# 평균으로 대체
price2 <- ifelse(!is.na(price), price, round(mean(price,na.rm=T),2))
sum(price2)

# 이상치 처리
#질적 자료
table(gender)
#gender를 못알아봐서 다시 detach
detach(dataset1)
table(dataset1$gender)
dataset1

#양적자료
summary(dataset1$price)
length(dataset1$price)

plot(dataset1$price)
boxplot(dataset1$price)
# subset을 사용하여 이상치를 제거하고 
dataset2 <- subset(dataset1,price>=2 & price <=8)
# 개수를 확인해보니 251개로 줄음
length(dataset2$price)

plot(dataset2$price)


boxplot(dataset2$price)

summary(dataset2$age)
plot(dataset2$age)
boxplot(dataset2$age)

## Feature Engineering
View(dataset2)

#가독성을 위한 (기술통계) 데이터 변경

dataset2$resident2[dataset2$resident ==1] <- "1.서울특별시"
dataset2$resident2[dataset2$resident ==2] <- "2.인천광역시"
dataset2$resident2[dataset2$resident ==3] <- "3.대전광역시"
dataset2$resident2[dataset2$resident ==4] <- "4.대구광역시"
dataset2$resident2[dataset2$resident ==5] <- "5.시구군"

view(dataset2)

summary(dataset2$resident)

# 척도 변경 : Binning
# 나이 변수를 청년층(30세이하), 중년층(31~55세이하), 장년층(56~)

dataset2$age2 <-ifelse(dataset2$age<=30,"청년층",ifelse(dataset2$age<=55,
                                                     "중년층","장년층"))
dataset2$age2[dataset2$age <=30] <- "청년층"
dataset2$age2[dataset2$age>30 & dataset2$age <=55] <- "중년층"
dataset2$age2[dataset2$age >55] <- "장년층"

View(dataset2)

#역코딩
# 개수확인 table
table(dataset2$survey)
survey <- dataset2$survey
survey
csurvey <- 6 - survey
dataset2$survey <-csurvey
head(dataset2)

# Dummy
# 거주유형 : 단톡주택(1), 다가구주택(2), 아파트 (3), 오피스텔(4)
# 직업유형 : 자영업(1), 사무직(2), 서비스(3), 전문직(4), 기타
user_data <- read.csv("../data/user_data.csv", header=T)
View(user_data)

table(user_data$house_type)

user_data$house_type2[user_data$house_type ==1 |user_data$house_type ==2] <-0
user_data$house_type2[user_data$house_type ==3 |user_data$house_type ==4] <-1

user_data$house_type3 <- ifelse(user_data$house_type==1|user_data$house_type==2,0,1)

#데이터 구조 변경 (wide type, long type: melt(long), cast(wide))
# reshape, reshape2, tidyr ....
install.packages("reshape2")
library(reshape2)

str(airquality)
head(airquality)

ml <- melt(airquality, id.vars = c("Month","Day"))
head(ml)
View(ml)
View(airquality)

m2 <- melt(airquality, id.vars = c("Month","Day"),
           variable.name ="climate_var",value.name = "climate_val" )
head(m2)
# dcast 함수를 사용하여 wide시킨다.
?dcast
# month와 day를 climatevar로 wide
dc1 <-dcast(m2, Month+Day~climate_var)
head(dc1)

data <-read.csv("../data/data.csv")
data
# Customer_ID를 기준으로 Date별로 wide시킨다.
wide<-dcast(data,Customer_ID~Date)
wide
# 평균으로
wide1 <- dcast(data, Customer_ID~Date, mean)
wide1

long <- melt(wide, id.vars = "Customer_ID")
long

pay_data <- read.csv("../data/pay_data.csv")
View(pay_data)
# user_id기준으로 product타입별로 wide하게 
wide_product <- dcast(pay_data, user_id~product_type)
wide_product
# product_type  wide   and price is placed
wide_product2 <- dcast(pay_data, user_id~product_type,mean)
wide_product2

#### MYSQL과 연동 page187 ####
install.packages("rJava")
install.packages("DBI")
install.packages("RMySQL")

library(RMySQL)
# create database rtest;
# use rtest;
# create table score (
#   student_no varchar(50) primary key,
#   kor int default 0,
#   eng int default 0,
#   mat int default 0
# );
# 
# netsong7 [11:56]
# insert into score(student_no, kor, eng, mat) values('1', 90, 80, 70);
# insert into score(student_no, kor, eng, mat) values('2', 90, 88, 70);
# insert into score(student_no, kor, eng, mat) values('3', 90, 89, 70);
# insert into score(student_no, kor, eng, mat) values('4', 90, 87, 70);
# insert into score(student_no, kor, eng, mat) values('5', 90, 60, 70);

conn <- dbConnect(MySQL(), dbname="rtest", user="root", password="1111", host="127.0.0.1")
?dbConnect
# 테이블의 목록을 얻는다
dbListTables(conn)

result <-dbGetQuery(conn, "select count(*) from score")
result

result <-dbGetQuery(conn, "select * from score")
result

# dbDisconnect(conn )
# 테이블 필드명 조회
dbListFields(conn, "score")

# DML
dbSendQuery(conn, "delete from score")

result <-dbGetQuery(conn, "select * from score")
result

# 파일로부터 데이터를 읽어들여 DB에 저장
file_score <- read.csv("../data/score.csv",header = T)
file_score
# score 테이블 삭제
dbSendQuery(conn, "drop table score")
dbListTables(conn)
# db로 table 옮기기
dbWriteTable(conn, "score", file_score, row.names=F)

result <- dbGetQuery(conn, "select * from score")
result

dbDisconnect(conn)

#--------------------------------
### sqldf : R +SQL
install.packages("sqldf")
library(sqldf)
detach('package:RMySQL',unload=T)

head(iris)
sqldf("select * from iris limit 6")
sqldf("select * from iris order by Species desc limit 10")
sqldf('select sum("Sepal.Length") from iris')
# unique(iris$Species) sql언어로하기
sqldf('select distinct species from iris')

#table(iris$Species) sql언어로 하기
sqldf('select distinct species, count(*) from iris group by species')

